
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadorSintactico;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\007\000\002\002\004\000\002\002" +
    "\006\000\002\002\006\000\002\006\003\000\002\006\004" +
    "\000\002\007\005\000\002\010\003\000\002\011\003\000" +
    "\002\012\003\000\002\012\003\000\002\013\003\000\002" +
    "\013\005\000\002\015\003\000\002\015\004\000\002\016" +
    "\004\000\002\016\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\020\003\000\002\020\003\000" +
    "\002\021\005\000\002\024\011\000\002\024\015\000\002" +
    "\025\011\000\002\022\004\000\002\023\004\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\004\000\002\003\005\000\002\003\005\000" +
    "\002\003\004\000\002\003\003\000\002\003\003\000\002" +
    "\003\005\000\002\003\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\004\003\000\002\004\003\000" +
    "\002\027\003\000\002\027\003\000\002\005\003\000\002" +
    "\044\003\000\002\014\003\000\002\045\003\000\002\035" +
    "\003\000\002\036\003\000\002\037\003\000\002\033\003" +
    "\000\002\034\003\000\002\030\003\000\002\031\003\000" +
    "\002\032\003\000\002\055\003\000\002\056\003\000\002" +
    "\053\003\000\002\054\003\000\002\040\003\000\002\041" +
    "\003\000\002\042\003\000\002\043\003\000\002\070\003" +
    "\000\002\047\003\000\002\050\003\000\002\052\003\000" +
    "\002\051\003\000\002\057\003\000\002\060\003\000\002" +
    "\061\003\000\002\062\003\000\002\063\003\000\002\064" +
    "\003\000\002\065\003\000\002\066\003\000\002\067\003" +
    "\000\002\046\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\004\030\006\001\002\000\004\002\206\001" +
    "\002\000\004\012\007\001\002\000\004\012\uffcb\001\002" +
    "\000\020\021\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027" +
    "\uffc3\045\uffc3\001\002\000\020\021\021\023\045\024\033" +
    "\025\034\026\022\027\015\045\041\001\002\000\020\005" +
    "\052\010\066\014\051\017\064\020\067\037\065\045\041" +
    "\001\002\000\004\010\066\001\002\000\042\004\uffcd\005" +
    "\uffcd\006\uffcd\007\uffcd\011\uffcd\031\uffcd\032\uffcd\033\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\040\uffcd\041\uffcd\042\uffcd\043" +
    "\uffcd\044\uffcd\001\002\000\004\045\041\001\002\000\020" +
    "\005\uffbe\010\uffbe\014\uffbe\017\uffbe\020\uffbe\037\uffbe\045" +
    "\uffbe\001\002\000\004\045\ufff9\001\002\000\004\013\147" +
    "\001\002\000\016\013\uffec\021\uffec\023\uffec\026\uffec\027" +
    "\uffec\045\uffec\001\002\000\004\010\uffc6\001\002\000\004" +
    "\045\uffbf\001\002\000\016\013\ufff1\021\ufff1\023\ufff1\026" +
    "\ufff1\027\ufff1\045\ufff1\001\002\000\004\045\ufff8\001\002" +
    "\000\004\044\ufff0\001\002\000\022\013\ufffd\021\ufffd\023" +
    "\ufffd\024\033\025\034\026\ufffd\027\ufffd\045\ufffd\001\002" +
    "\000\016\013\ufff4\021\021\023\045\026\022\027\015\045" +
    "\041\001\002\000\016\013\uffed\021\uffed\023\uffed\026\uffed" +
    "\027\uffed\045\uffed\001\002\000\004\044\uffee\001\002\000" +
    "\004\044\uffef\001\002\000\004\045\uffc9\001\002\000\004" +
    "\045\uffca\001\002\000\004\010\066\001\002\000\004\045" +
    "\041\001\002\000\004\045\ufffa\001\002\000\016\013\147" +
    "\021\021\023\045\026\022\027\015\045\041\001\002\000" +
    "\042\004\uffcc\005\uffcc\006\uffcc\007\uffcc\011\uffcc\031\uffcc" +
    "\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\040\uffcc\041" +
    "\uffcc\042\uffcc\043\uffcc\044\uffcc\001\002\000\004\044\145" +
    "\001\002\000\004\045\ufff7\001\002\000\004\043\047\001" +
    "\002\000\004\010\uffc5\001\002\000\020\005\052\010\066" +
    "\014\051\017\064\020\067\037\065\045\041\001\002\000" +
    "\020\005\uffbb\010\uffbb\014\uffbb\017\uffbb\020\uffbb\037\uffbb" +
    "\045\uffbb\001\002\000\020\005\052\010\066\014\051\017" +
    "\064\020\067\037\065\045\041\001\002\000\036\004\uffad" +
    "\005\uffad\006\uffad\007\uffad\011\uffad\031\uffad\032\uffad\033" +
    "\uffad\034\uffad\035\uffad\036\uffad\040\uffad\041\uffad\044\uffad" +
    "\001\002\000\020\005\uffb9\010\uffb9\014\uffb9\017\uffb9\020" +
    "\uffb9\037\uffb9\045\uffb9\001\002\000\036\004\uffcf\005\uffcf" +
    "\006\uffcf\007\uffcf\011\uffcf\031\uffcf\032\uffcf\033\uffcf\034" +
    "\uffcf\035\uffcf\036\uffcf\040\uffcf\041\uffcf\044\uffcf\001\002" +
    "\000\036\004\uffdc\005\uffdc\006\uffdc\007\uffdc\011\uffdc\031" +
    "\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\040\uffdc" +
    "\041\uffdc\044\uffdc\001\002\000\036\004\uffd3\005\uffd3\006" +
    "\uffd3\007\uffd3\011\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3" +
    "\035\uffd3\036\uffd3\040\uffd3\041\uffd3\044\uffd3\001\002\000" +
    "\020\004\104\005\052\006\101\007\076\040\105\041\100" +
    "\044\uffeb\001\002\000\020\005\052\010\066\014\051\017" +
    "\064\020\067\037\065\045\041\001\002\000\036\004\uffd1" +
    "\005\uffd1\006\uffd1\007\uffd1\011\uffd1\031\uffd1\032\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\036\uffd1\040\uffd1\041\uffd1\044\uffd1" +
    "\001\002\000\036\004\uffd0\005\uffd0\006\uffd0\007\uffd0\011" +
    "\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0" +
    "\040\uffd0\041\uffd0\044\uffd0\001\002\000\036\004\uffce\005" +
    "\uffce\006\uffce\007\uffce\011\uffce\031\uffce\032\uffce\033\uffce" +
    "\034\uffce\035\uffce\036\uffce\040\uffce\041\uffce\044\uffce\001" +
    "\002\000\036\004\uffd2\005\uffd2\006\uffd2\007\uffd2\011\uffd2" +
    "\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\040" +
    "\uffd2\041\uffd2\044\uffd2\001\002\000\036\004\uffbc\005\uffbc" +
    "\006\uffbc\007\uffbc\011\uffbc\031\uffbc\032\uffbc\033\uffbc\034" +
    "\uffbc\035\uffbc\036\uffbc\040\uffbc\041\uffbc\044\uffbc\001\002" +
    "\000\020\005\uffb4\010\uffb4\014\uffb4\017\uffb4\020\uffb4\037" +
    "\uffb4\045\uffb4\001\002\000\020\005\uffc1\010\uffc1\014\uffc1" +
    "\017\uffc1\020\uffc1\037\uffc1\045\uffc1\001\002\000\036\004" +
    "\uffbd\005\uffbd\006\uffbd\007\uffbd\011\uffbd\031\uffbd\032\uffbd" +
    "\033\uffbd\034\uffbd\035\uffbd\036\uffbd\040\uffbd\041\uffbd\044" +
    "\uffbd\001\002\000\020\005\052\010\066\014\051\017\064" +
    "\020\067\037\065\045\041\001\002\000\036\004\uffdd\005" +
    "\uffdd\006\uffdd\007\uffdd\011\uffdd\031\uffdd\032\uffdd\033\uffdd" +
    "\034\uffdd\035\uffdd\036\uffdd\040\uffdd\041\uffdd\044\uffdd\001" +
    "\002\000\036\004\104\005\052\006\101\007\076\011\uffe1" +
    "\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\040" +
    "\105\041\100\044\uffe1\001\002\000\020\005\052\010\066" +
    "\014\051\017\064\020\067\037\065\045\041\001\002\000" +
    "\020\005\052\010\066\014\051\017\064\020\067\037\065" +
    "\045\041\001\002\000\020\005\052\010\066\014\051\017" +
    "\064\020\067\037\065\045\041\001\002\000\020\005\uffb8" +
    "\010\uffb8\014\uffb8\017\uffb8\020\uffb8\037\uffb8\045\uffb8\001" +
    "\002\000\020\005\052\010\066\014\051\017\064\020\067" +
    "\037\065\045\041\001\002\000\020\005\uffb6\010\uffb6\014" +
    "\uffb6\017\uffb6\020\uffb6\037\uffb6\045\uffb6\001\002\000\020" +
    "\005\uffb7\010\uffb7\014\uffb7\017\uffb7\020\uffb7\037\uffb7\045" +
    "\uffb7\001\002\000\020\005\052\010\066\014\051\017\064" +
    "\020\067\037\065\045\041\001\002\000\020\005\052\010" +
    "\066\014\051\017\064\020\067\037\065\045\041\001\002" +
    "\000\020\005\uffba\010\uffba\014\uffba\017\uffba\020\uffba\037" +
    "\uffba\045\uffba\001\002\000\020\005\uffb5\010\uffb5\014\uffb5" +
    "\017\uffb5\020\uffb5\037\uffb5\045\uffb5\001\002\000\036\004" +
    "\104\005\052\006\101\007\076\011\uffe5\031\uffe5\032\uffe5" +
    "\033\uffe5\034\uffe5\035\uffe5\036\uffe5\040\105\041\100\044" +
    "\uffe5\001\002\000\036\004\104\005\052\006\101\007\076" +
    "\011\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\040\105\041\100\044\uffe4\001\002\000\036\004\104" +
    "\005\052\006\101\007\076\011\uffe0\031\uffe0\032\uffe0\033" +
    "\uffe0\034\uffe0\035\uffe0\036\uffe0\040\105\041\100\044\uffe0" +
    "\001\002\000\036\004\104\005\052\006\101\007\076\011" +
    "\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2" +
    "\040\105\041\100\044\uffe2\001\002\000\036\004\104\005" +
    "\052\006\101\007\076\011\uffe3\031\uffe3\032\uffe3\033\uffe3" +
    "\034\uffe3\035\uffe3\036\uffe3\040\105\041\100\044\uffe3\001" +
    "\002\000\036\004\104\005\052\006\101\007\076\011\uffdf" +
    "\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\040" +
    "\105\041\100\044\uffdf\001\002\000\036\004\104\005\052" +
    "\006\101\007\076\011\uffde\031\uffde\032\uffde\033\uffde\034" +
    "\uffde\035\uffde\036\uffde\040\105\041\100\044\uffde\001\002" +
    "\000\034\004\104\005\052\006\101\007\076\011\117\031" +
    "\133\032\125\033\130\034\124\035\131\036\127\040\105" +
    "\041\100\001\002\000\004\011\117\001\002\000\040\004" +
    "\uffc0\005\uffc0\006\uffc0\007\uffc0\011\uffc0\012\uffc0\031\uffc0" +
    "\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\040\uffc0\041" +
    "\uffc0\044\uffc0\001\002\000\036\004\uffda\005\uffda\006\uffda" +
    "\007\uffda\011\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035" +
    "\uffda\036\uffda\040\uffda\041\uffda\044\uffda\001\002\000\020" +
    "\005\052\010\066\014\051\017\064\020\067\037\065\045" +
    "\041\001\002\000\020\005\052\010\066\014\051\017\064" +
    "\020\067\037\065\045\041\001\002\000\036\004\uffdb\005" +
    "\uffdb\006\uffdb\007\uffdb\011\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\035\uffdb\036\uffdb\040\uffdb\041\uffdb\044\uffdb\001" +
    "\002\000\020\005\uffb1\010\uffb1\014\uffb1\017\uffb1\020\uffb1" +
    "\037\uffb1\045\uffb1\001\002\000\020\005\uffaf\010\uffaf\014" +
    "\uffaf\017\uffaf\020\uffaf\037\uffaf\045\uffaf\001\002\000\020" +
    "\005\052\010\066\014\051\017\064\020\067\037\065\045" +
    "\041\001\002\000\020\005\uffb3\010\uffb3\014\uffb3\017\uffb3" +
    "\020\uffb3\037\uffb3\045\uffb3\001\002\000\020\005\uffb0\010" +
    "\uffb0\014\uffb0\017\uffb0\020\uffb0\037\uffb0\045\uffb0\001\002" +
    "\000\020\005\uffb2\010\uffb2\014\uffb2\017\uffb2\020\uffb2\037" +
    "\uffb2\045\uffb2\001\002\000\020\005\052\010\066\014\051" +
    "\017\064\020\067\037\065\045\041\001\002\000\020\005" +
    "\uffae\010\uffae\014\uffae\017\uffae\020\uffae\037\uffae\045\uffae" +
    "\001\002\000\020\005\052\010\066\014\051\017\064\020" +
    "\067\037\065\045\041\001\002\000\020\005\052\010\066" +
    "\014\051\017\064\020\067\037\065\045\041\001\002\000" +
    "\020\004\104\005\052\006\101\007\076\011\uffd9\040\105" +
    "\041\100\001\002\000\020\004\104\005\052\006\101\007" +
    "\076\011\uffd5\040\105\041\100\001\002\000\020\004\104" +
    "\005\052\006\101\007\076\011\uffd4\040\105\041\100\001" +
    "\002\000\020\004\104\005\052\006\101\007\076\011\uffd6" +
    "\040\105\041\100\001\002\000\020\004\104\005\052\006" +
    "\101\007\076\011\uffd7\040\105\041\100\001\002\000\020" +
    "\004\104\005\052\006\101\007\076\011\uffd8\040\105\041" +
    "\100\001\002\000\016\013\ufff2\021\ufff2\023\ufff2\026\ufff2" +
    "\027\ufff2\045\ufff2\001\002\000\022\013\uffc8\021\uffc8\023" +
    "\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\045\uffc8\001\002" +
    "\000\004\013\147\001\002\000\022\002\uffc2\013\uffc2\021" +
    "\uffc2\022\uffc2\023\uffc2\026\uffc2\027\uffc2\045\uffc2\001\002" +
    "\000\004\002\uffff\001\002\000\004\002\001\001\002\000" +
    "\006\042\156\044\ufff6\001\002\000\004\044\145\001\002" +
    "\000\022\013\ufffb\021\ufffb\023\ufffb\024\ufffb\025\ufffb\026" +
    "\ufffb\027\ufffb\045\ufffb\001\002\000\004\045\041\001\002" +
    "\000\004\045\uffc7\001\002\000\004\044\ufff5\001\002\000" +
    "\020\005\052\010\066\014\051\017\064\020\067\037\065" +
    "\045\041\001\002\000\020\004\104\005\052\006\101\007" +
    "\076\011\117\040\105\041\100\001\002\000\004\012\007" +
    "\001\002\000\014\021\021\023\045\026\022\027\015\045" +
    "\041\001\002\000\004\013\147\001\002\000\020\013\uffea" +
    "\021\uffea\022\167\023\uffea\026\uffea\027\uffea\045\uffea\001" +
    "\002\000\004\012\007\001\002\000\004\012\uffc4\001\002" +
    "\000\014\021\021\023\045\026\022\027\015\045\041\001" +
    "\002\000\004\013\147\001\002\000\016\013\uffe9\021\uffe9" +
    "\023\uffe9\026\uffe9\027\uffe9\045\uffe9\001\002\000\004\013" +
    "\ufff3\001\002\000\016\013\ufffc\021\ufffc\023\ufffc\026\ufffc" +
    "\027\ufffc\045\ufffc\001\002\000\004\002\ufffe\001\002\000" +
    "\004\044\uffe7\001\002\000\020\005\052\010\066\014\051" +
    "\017\064\020\067\037\065\045\041\001\002\000\020\004" +
    "\104\005\052\006\101\007\076\011\117\040\105\041\100" +
    "\001\002\000\004\012\007\001\002\000\014\021\021\023" +
    "\045\026\022\027\015\045\041\001\002\000\004\013\147" +
    "\001\002\000\016\013\uffe8\021\uffe8\023\uffe8\026\uffe8\027" +
    "\uffe8\045\uffe8\001\002\000\020\004\104\005\052\006\101" +
    "\007\076\040\105\041\100\044\uffe6\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\006\002\003\035\004\001\001\000\002\001" +
    "\001\000\004\055\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\006\037\007\025\010\035\011\036\012" +
    "\015\014\043\015\016\016\026\017\041\020\022\021\024" +
    "\022\031\023\030\024\027\025\017\030\011\031\034\036" +
    "\023\037\042\040\013\041\010\045\012\001\001\000\034" +
    "\003\204\004\053\005\062\014\070\027\054\042\057\043" +
    "\060\044\052\045\012\046\061\050\067\053\047\061\056" +
    "\001\001\000\004\053\176\001\001\000\002\001\001\000" +
    "\006\014\175\045\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\056\174\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\006\173\007\025\010" +
    "\035\011\036\012\015\036\023\037\042\001\001\000\040" +
    "\014\043\015\172\016\026\017\041\020\022\021\024\022" +
    "\031\023\030\024\027\025\017\030\011\031\034\040\013" +
    "\041\010\045\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\053\157\001\001\000\010\013\152\014\151\045" +
    "\012\001\001\000\002\001\001\000\042\014\043\015\145" +
    "\016\026\017\041\020\022\021\024\022\031\023\030\024" +
    "\027\025\017\030\011\031\034\040\013\041\010\045\012" +
    "\056\147\001\001\000\002\001\001\000\004\033\143\001" +
    "\001\000\002\001\001\000\004\070\045\001\001\000\002" +
    "\001\001\000\034\003\055\004\053\005\062\014\070\027" +
    "\054\042\057\043\060\044\052\045\012\046\061\050\067" +
    "\053\047\061\056\001\001\000\002\001\001\000\036\003" +
    "\114\004\053\005\062\014\070\026\115\027\054\042\057" +
    "\043\060\044\052\045\012\046\061\050\067\053\047\061" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\047" +
    "\102\050\101\051\074\052\073\057\076\060\072\001\001" +
    "\000\034\003\113\004\053\005\062\014\070\027\054\042" +
    "\057\043\060\044\052\045\012\046\061\050\067\053\047" +
    "\061\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\003" +
    "\071\004\053\005\062\014\070\027\054\042\057\043\060" +
    "\044\052\045\012\046\061\050\067\053\047\061\056\001" +
    "\001\000\002\001\001\000\016\047\102\050\101\051\074" +
    "\052\073\057\076\060\072\001\001\000\034\003\112\004" +
    "\053\005\062\014\070\027\054\042\057\043\060\044\052" +
    "\045\012\046\061\050\067\053\047\061\056\001\001\000" +
    "\034\003\111\004\053\005\062\014\070\027\054\042\057" +
    "\043\060\044\052\045\012\046\061\050\067\053\047\061" +
    "\056\001\001\000\034\003\110\004\053\005\062\014\070" +
    "\027\054\042\057\043\060\044\052\045\012\046\061\050" +
    "\067\053\047\061\056\001\001\000\002\001\001\000\034" +
    "\003\107\004\053\005\062\014\070\027\054\042\057\043" +
    "\060\044\052\045\012\046\061\050\067\053\047\061\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\003" +
    "\106\004\053\005\062\014\070\027\054\042\057\043\060" +
    "\044\052\045\012\046\061\050\067\053\047\061\056\001" +
    "\001\000\034\003\105\004\053\005\062\014\070\027\054" +
    "\042\057\043\060\044\052\045\012\046\061\050\067\053" +
    "\047\061\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\047\102\050\101\051\074\052\073\057\076\060" +
    "\072\001\001\000\016\047\102\050\101\051\074\052\073" +
    "\057\076\060\072\001\001\000\016\047\102\050\101\051" +
    "\074\052\073\057\076\060\072\001\001\000\016\047\102" +
    "\050\101\051\074\052\073\057\076\060\072\001\001\000" +
    "\016\047\102\050\101\051\074\052\073\057\076\060\072" +
    "\001\001\000\016\047\102\050\101\051\074\052\073\057" +
    "\076\060\072\001\001\000\016\047\102\050\101\051\074" +
    "\052\073\057\076\060\072\001\001\000\034\047\102\050" +
    "\101\051\074\052\073\054\122\057\076\060\072\062\134" +
    "\063\120\064\121\065\125\066\133\067\131\001\001\000" +
    "\004\054\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\003\142\004\053\005\062\014\070\027\054\042" +
    "\057\043\060\044\052\045\012\046\061\050\067\053\047" +
    "\061\056\001\001\000\034\003\141\004\053\005\062\014" +
    "\070\027\054\042\057\043\060\044\052\045\012\046\061" +
    "\050\067\053\047\061\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\003\140\004\053" +
    "\005\062\014\070\027\054\042\057\043\060\044\052\045" +
    "\012\046\061\050\067\053\047\061\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\003" +
    "\137\004\053\005\062\014\070\027\054\042\057\043\060" +
    "\044\052\045\012\046\061\050\067\053\047\061\056\001" +
    "\001\000\002\001\001\000\034\003\136\004\053\005\062" +
    "\014\070\027\054\042\057\043\060\044\052\045\012\046" +
    "\061\050\067\053\047\061\056\001\001\000\034\003\135" +
    "\004\053\005\062\014\070\027\054\042\057\043\060\044" +
    "\052\045\012\046\061\050\067\053\047\061\056\001\001" +
    "\000\016\047\102\050\101\051\074\052\073\057\076\060" +
    "\072\001\001\000\016\047\102\050\101\051\074\052\073" +
    "\057\076\060\072\001\001\000\016\047\102\050\101\051" +
    "\074\052\073\057\076\060\072\001\001\000\016\047\102" +
    "\050\101\051\074\052\073\057\076\060\072\001\001\000" +
    "\016\047\102\050\101\051\074\052\073\057\076\060\072" +
    "\001\001\000\016\047\102\050\101\051\074\052\073\057" +
    "\076\060\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\154\001\001\000\004" +
    "\033\153\001\001\000\002\001\001\000\010\013\156\014" +
    "\151\045\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\003\160\004\053\005\062\014\070\027\054\042" +
    "\057\043\060\044\052\045\012\046\061\050\067\053\047" +
    "\061\056\001\001\000\020\047\102\050\101\051\074\052" +
    "\073\054\161\057\076\060\072\001\001\000\004\055\162" +
    "\001\001\000\040\014\043\015\163\016\026\017\041\020" +
    "\022\021\024\022\031\023\030\024\027\025\017\030\011" +
    "\031\034\040\013\041\010\045\012\001\001\000\004\056" +
    "\164\001\001\000\004\032\165\001\001\000\004\055\167" +
    "\001\001\000\002\001\001\000\040\014\043\015\170\016" +
    "\026\017\041\020\022\021\024\022\031\023\030\024\027" +
    "\025\017\030\011\031\034\040\013\041\010\045\012\001" +
    "\001\000\004\056\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\003\177\004\053\005\062\014\070\027\054" +
    "\042\057\043\060\044\052\045\012\046\061\050\067\053" +
    "\047\061\056\001\001\000\020\047\102\050\101\051\074" +
    "\052\073\054\200\057\076\060\072\001\001\000\004\055" +
    "\201\001\001\000\040\014\043\015\202\016\026\017\041" +
    "\020\022\021\024\022\031\023\030\024\027\025\017\030" +
    "\011\031\034\040\013\041\010\045\012\001\001\000\004" +
    "\056\203\001\001\000\002\001\001\000\016\047\102\050" +
    "\101\051\074\052\073\057\076\060\072\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Yylex getYylex() {
        return (Yylex)getScanner();
    }

    public void syntax_error(Symbol cur_token) {
        Yylex s = getYylex();
	    System.err.println("****Error sintactico en [lin " + s.linea() + ", col " + s.columna() + "]");
    }

    private void printToken(String token) {
        System.out.println(";D:\t" + token);
    }

    private void printLexema() {
        Yylex s = getYylex();
        System.out.println(";D:\t" + s.lexema);
    }

    private void printProduccion(int num, String produccion) {
        System.out.println(";R" + num + ":\t" + produccion);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= tok_main tok_llave_izq declaraciones sentencias tok_llave_der 
            {
              Object RESULT =null;
		 printProduccion(1, "<programa> ::= main { <declaraciones> <funciones> <sentencias> }"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= tok_main tok_llave_izq declaraciones tok_llave_der 
            {
              Object RESULT =null;
		 printProduccion(1, "<programa> ::= main { <declaraciones> <funciones> <sentencias> }"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= tok_main tok_llave_izq sentencias tok_llave_der 
            {
              Object RESULT =null;
		 printProduccion(1, "<programa> ::= main { <declaraciones> <funciones> <sentencias> }"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= declaracion 
            {
              Object RESULT =null;
		 printProduccion(2, "<declaraciones> ::= <declaracion>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaraciones ::= declaracion declaraciones 
            {
              Object RESULT =null;
		 printProduccion(3, "<declaraciones> ::= <declaracion> <declaraciones>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion ::= clase identificadores tok_puntoycoma 
            {
              Object RESULT =null;
		 printProduccion(4, "<declaracion> ::= <clase> <identificadores> ;"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // clase ::= clase_escalar 
            {
              Object RESULT =null;
		 printProduccion(5, "<clase> ::= <clase_escalar>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // clase_escalar ::= tipo 
            {
              Object RESULT =null;
		 printProduccion(9, "<clase_escalar> ::= <tipo>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase_escalar",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo ::= tok_int 
            {
              Object RESULT =null;
		 printProduccion(10, "<tipo> ::= int"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= tok_boolean 
            {
              Object RESULT =null;
		 printProduccion(11, "<tipo> ::= boolean"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // identificadores ::= identificador 
            {
              Object RESULT =null;
		 printProduccion(18, "<identificadores> ::= <identificador>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identificadores",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // identificadores ::= identificador tok_coma identificadores 
            {
              Object RESULT =null;
		 printProduccion(19, "<identificadores> ::=<identificador>,<identificadores>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identificadores",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencias ::= sentencia 
            {
              Object RESULT =null;
		 printProduccion(30, "<sentencias> ::= <sentencia>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencias ::= sentencia sentencias 
            {
              Object RESULT =null;
		 printProduccion(31, "<sentencias> ::= <sentencia> <sentencias>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= sentencia_simple tok_puntoycoma 
            {
              Object RESULT =null;
		 printProduccion(32, "<sentencia> ::= <sentencia_simple> ;"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= bloque 
            {
              Object RESULT =null;
		 printProduccion(33, "<sentencia> ::= <bloque>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia_simple ::= asignacion 
            {
              Object RESULT =null;
		 printProduccion(34, "<sentencia_simple> ::= <asignacion>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simple",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia_simple ::= lectura 
            {
              Object RESULT =null;
		 printProduccion(35, "<sentencia_simple> ::= <lectura>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simple",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia_simple ::= escritura 
            {
              Object RESULT =null;
		 printProduccion(36, "<sentencia_simple> ::= <escritura>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simple",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bloque ::= condicional 
            {
              Object RESULT =null;
		 printProduccion(40, "<bloque> ::= <condicional>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bloque ::= bucle 
            {
              Object RESULT =null;
		 printProduccion(41, "<bloque> ::= <bucle>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // asignacion ::= identificador tok_asignacion exp 
            {
              Object RESULT =null;
		 printProduccion(43, "<asignacion> ::= <identificador> = <exp>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // condicional ::= tok_if tok_paren_izq exp tok_paren_der tok_llave_izq sentencias tok_llave_der 
            {
              Object RESULT =null;
		 printProduccion(50, "<condicional> ::= if ( <exp> ) { <sentencias> }"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // condicional ::= tok_if tok_paren_izq exp tok_paren_der tok_llave_izq sentencias tok_llave_der tok_else tok_llave_izq sentencias tok_llave_der 
            {
              Object RESULT =null;
		 printProduccion(51, "<condicional> ::= if ( <exp> ) { <sentencias> } else { <sentencias> }"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bucle ::= tok_while tok_paren_izq exp tok_paren_der tok_llave_izq sentencias tok_llave_der 
            {
              Object RESULT =null;
		 printProduccion(52, "<bucle> ::= while ( <exp> ) { <sentencias> }"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bucle",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lectura ::= tok_scanf identificador 
            {
              Object RESULT =null;
		 printProduccion(54, "<lectura> ::= scanf <identificador>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lectura",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // escritura ::= tok_printf exp 
            {
              Object RESULT =null;
		 printProduccion(56, "<escritura> ::= printf <exp>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escritura",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= exp tok_mas exp 
            {
              Object RESULT =null;
		 printProduccion(72, "<exp> ::= <exp> + <exp>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= exp tok_menos exp 
            {
              Object RESULT =null;
		 printProduccion(73, "<exp> ::= <exp> - <exp>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= exp tok_division exp 
            {
              Object RESULT =null;
		 printProduccion(74, "<exp> ::= <exp> / <exp>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= exp tok_asterisco exp 
            {
              Object RESULT =null;
		 printProduccion(75, "<exp> ::= <exp> * <exp>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= tok_menos exp 
            {
              Object RESULT =null;
		 printProduccion(76, "<exp> ::= - <exp>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= exp tok_and exp 
            {
              Object RESULT =null;
		 printProduccion(77, "<exp> ::= <exp> && <exp>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= exp tok_or exp 
            {
              Object RESULT =null;
		 printProduccion(78, "<exp> ::= <exp> || <exp>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= tok_not exp 
            {
              Object RESULT =null;
		 printProduccion(79, "<exp> ::= ! <exp>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= identificador 
            {
              Object RESULT =null;
		 printProduccion(80, "<exp> ::= <identificador>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= constante 
            {
              Object RESULT =null;
		 printProduccion(81, "<exp> ::= <constante>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= tok_paren_izq exp tok_paren_der 
            {
              Object RESULT =null;
		 printProduccion(82, "<exp> ::= ( <exp> )"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= tok_paren_izq comparacion tok_paren_der 
            {
              Object RESULT =null;
		 printProduccion(83, "<exp> ::= ( <comparacion> )"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comparacion ::= exp tok_igual exp 
            {
              Object RESULT =null;
		 printProduccion(93, "<comparacion> ::= <exp> == <exp>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comparacion ::= exp tok_distinto exp 
            {
              Object RESULT =null;
		 printProduccion(94, "<comparacion> ::= <exp> != <exp>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comparacion ::= exp tok_menorigual exp 
            {
              Object RESULT =null;
		 printProduccion(95, "<comparacion> ::= <exp> <= <exp>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comparacion ::= exp tok_mayorigual exp 
            {
              Object RESULT =null;
		 printProduccion(96, "<comparacion> ::= <exp> >= <exp>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comparacion ::= exp tok_menor exp 
            {
              Object RESULT =null;
		 printProduccion(97, "<comparacion> ::= <exp> < <exp>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // comparacion ::= exp tok_mayor exp 
            {
              Object RESULT =null;
		 printProduccion(98, "<comparacion> ::= <exp> > <exp>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // constante ::= constante_logica 
            {
              Object RESULT =null;
		 printProduccion(99, "<constante> ::= <constante_logica>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // constante ::= constante_entera 
            {
              Object RESULT =null;
		 printProduccion(100, "<constante> ::= <constante_entera>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // constante_logica ::= tok_true 
            {
              Object RESULT =null;
		 printProduccion(102, "<constante_logica> ::= true"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante_logica",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // constante_logica ::= tok_false 
            {
              Object RESULT =null;
		 printProduccion(103, "<constante_logica> ::= false"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante_logica",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // constante_entera ::= numero 
            {
              Object RESULT =null;
		 printProduccion(104, "<constante_entera> ::= <numero>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante_entera",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // numero ::= tok_constante_entera 
            {
              Object RESULT =null;
		 printProduccion(105, "<numero> ::= TOK_CONSTANTE_ENTERA"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // identificador ::= tok_identificador 
            {
              Object RESULT =null;
		 printProduccion(108, "<identificador> ::= TOK_IDENTIFICADOR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identificador",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tok_identificador ::= TOK_IDENTIFICADOR 
            {
              Object RESULT =null;
		 printLexema(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok_identificador",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tok_main ::= TOK_MAIN 
            {
              Object RESULT =null;
		 printToken("main"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok_main",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tok_int ::= TOK_INT 
            {
              Object RESULT =null;
		 printToken("int"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok_int",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tok_boolean ::= TOK_BOOLEAN 
            {
              Object RESULT =null;
		 printToken("boolean"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok_boolean",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // tok_puntoycoma ::= TOK_PUNTOYCOMA 
            {
              Object RESULT =null;
		 printToken(";"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok_puntoycoma",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // tok_coma ::= TOK_COMA 
            {
              Object RESULT =null;
		  printToken(","); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok_coma",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // tok_while ::= TOK_WHILE 
            {
              Object RESULT =null;
		 printToken("while"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok_while",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // tok_if ::= TOK_IF 
            {
              Object RESULT =null;
		 printToken("if"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok_if",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // tok_else ::= TOK_ELSE 
            {
              Object RESULT =null;
		 printToken("else"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok_else",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // tok_llave_izq ::= TOK_LLAVEIZQUIERDA 
            {
              Object RESULT =null;
		 printToken("{"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok_llave_izq",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // tok_llave_der ::= TOK_LLAVEDERECHA 
            {
              Object RESULT =null;
		 printToken("}"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok_llave_der",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // tok_paren_izq ::= TOK_PARENTESISIZQUIERDO 
            {
              Object RESULT =null;
		 printToken("("); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok_paren_izq",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tok_paren_der ::= TOK_PARENTESISDERECHO 
            {
              Object RESULT =null;
		 printToken(")"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok_paren_der",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tok_scanf ::= TOK_SCANF 
            {
              Object RESULT =null;
		 printToken("scanf"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok_scanf",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tok_printf ::= TOK_PRINTF 
            {
              Object RESULT =null;
		 printToken("printf"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok_printf",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tok_true ::= TOK_TRUE 
            {
              Object RESULT =null;
		 printToken("true"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok_true",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tok_false ::= TOK_FALSE 
            {
              Object RESULT =null;
		 printToken("false"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok_false",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tok_asignacion ::= TOK_ASIGNACION 
            {
              Object RESULT =null;
		 printToken("="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok_asignacion",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tok_mas ::= TOK_MAS 
            {
              Object RESULT =null;
		 printToken("+"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok_mas",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tok_menos ::= TOK_MENOS 
            {
              Object RESULT =null;
		 printToken("-"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok_menos",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // tok_division ::= TOK_DIVISION 
            {
              Object RESULT =null;
		 printToken("/"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok_division",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // tok_asterisco ::= TOK_ASTERISCO 
            {
              Object RESULT =null;
		 printToken("*"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok_asterisco",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // tok_and ::= TOK_AND 
            {
              Object RESULT =null;
		 printToken("&&"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok_and",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // tok_or ::= TOK_OR 
            {
              Object RESULT =null;
		 printToken("||"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok_or",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // tok_not ::= TOK_NOT 
            {
              Object RESULT =null;
		 printToken("!"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok_not",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // tok_igual ::= TOK_IGUAL 
            {
              Object RESULT =null;
		 printToken("=="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok_igual",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // tok_distinto ::= TOK_DISTINTO 
            {
              Object RESULT =null;
		 printToken("!="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok_distinto",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // tok_menorigual ::= TOK_MENORIGUAL 
            {
              Object RESULT =null;
		 printToken("<="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok_menorigual",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // tok_mayorigual ::= TOK_MAYORIGUAL 
            {
              Object RESULT =null;
		 printToken(">="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok_mayorigual",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tok_menor ::= TOK_MENOR 
            {
              Object RESULT =null;
		 printToken("<"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok_menor",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tok_mayor ::= TOK_MAYOR 
            {
              Object RESULT =null;
		 printToken(">"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok_mayor",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // tok_constante_entera ::= TOK_CONSTANTE_ENTERA 
            {
              Object RESULT =null;
		 printLexema(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok_constante_entera",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
