
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadorSintactico;

import java_cup.runtime.*;
import java.io.Writer;
import java.io.IOException;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\007\000\002\002\004\000\002\002" +
    "\006\000\002\002\006\000\002\006\003\000\002\006\004" +
    "\000\002\007\005\000\002\010\003\000\002\011\003\000" +
    "\002\012\003\000\002\012\003\000\002\013\003\000\002" +
    "\013\005\000\002\015\003\000\002\015\004\000\002\016" +
    "\004\000\002\016\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\020\003\000\002\020\003\000" +
    "\002\021\005\000\002\024\011\000\002\024\015\000\002" +
    "\025\011\000\002\022\004\000\002\023\004\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\004\000\002\003\005\000\002\003\005\000" +
    "\002\003\004\000\002\003\003\000\002\003\003\000\002" +
    "\003\005\000\002\003\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\004\003\000\002\004\003\000" +
    "\002\027\003\000\002\027\003\000\002\005\003\000\002" +
    "\030\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\004\030\005\001\002\000\004\002\146\001" +
    "\002\000\004\012\006\001\002\000\020\021\013\023\034" +
    "\024\024\025\025\026\015\027\007\045\031\001\002\000" +
    "\020\005\036\010\046\014\044\017\042\020\047\037\037" +
    "\045\031\001\002\000\004\045\ufff9\001\002\000\004\013" +
    "\144\001\002\000\016\013\uffec\021\uffec\023\uffec\026\uffec" +
    "\027\uffec\045\uffec\001\002\000\004\010\136\001\002\000" +
    "\016\013\ufff1\021\ufff1\023\ufff1\026\ufff1\027\ufff1\045\ufff1" +
    "\001\002\000\004\045\031\001\002\000\004\044\ufff0\001" +
    "\002\000\022\013\ufffd\021\ufffd\023\ufffd\024\024\025\025" +
    "\026\ufffd\027\ufffd\045\ufffd\001\002\000\016\013\ufff4\021" +
    "\013\023\034\026\015\027\007\045\031\001\002\000\016" +
    "\013\uffed\021\uffed\023\uffed\026\uffed\027\uffed\045\uffed\001" +
    "\002\000\004\044\uffee\001\002\000\004\044\uffef\001\002" +
    "\000\004\045\ufff7\001\002\000\004\045\ufff8\001\002\000" +
    "\004\045\031\001\002\000\004\045\ufffa\001\002\000\016" +
    "\013\123\021\013\023\034\026\015\027\007\045\031\001" +
    "\002\000\042\004\uffcd\005\uffcd\006\uffcd\007\uffcd\011\uffcd" +
    "\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\040" +
    "\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\001\002\000\004" +
    "\044\122\001\002\000\004\043\120\001\002\000\004\010" +
    "\035\001\002\000\020\005\036\010\046\014\044\017\042" +
    "\020\047\037\037\045\031\001\002\000\020\005\036\010" +
    "\046\014\044\017\042\020\047\037\037\045\031\001\002" +
    "\000\020\005\036\010\046\014\044\017\042\020\047\037" +
    "\037\045\031\001\002\000\020\004\070\005\055\006\067" +
    "\007\061\011\106\040\071\041\063\001\002\000\036\004" +
    "\uffd3\005\uffd3\006\uffd3\007\uffd3\011\uffd3\031\uffd3\032\uffd3" +
    "\033\uffd3\034\uffd3\035\uffd3\036\uffd3\040\uffd3\041\uffd3\044" +
    "\uffd3\001\002\000\036\004\uffd0\005\uffd0\006\uffd0\007\uffd0" +
    "\011\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\040\uffd0\041\uffd0\044\uffd0\001\002\000\036\004\uffdc" +
    "\005\uffdc\006\uffdc\007\uffdc\011\uffdc\031\uffdc\032\uffdc\033" +
    "\uffdc\034\uffdc\035\uffdc\036\uffdc\040\uffdc\041\uffdc\044\uffdc" +
    "\001\002\000\036\004\uffce\005\uffce\006\uffce\007\uffce\011" +
    "\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce" +
    "\040\uffce\041\uffce\044\uffce\001\002\000\036\004\uffcf\005" +
    "\uffcf\006\uffcf\007\uffcf\011\uffcf\031\uffcf\032\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\036\uffcf\040\uffcf\041\uffcf\044\uffcf\001" +
    "\002\000\020\005\036\010\046\014\044\017\042\020\047" +
    "\037\037\045\031\001\002\000\036\004\uffd1\005\uffd1\006" +
    "\uffd1\007\uffd1\011\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\040\uffd1\041\uffd1\044\uffd1\001\002\000" +
    "\036\004\uffd2\005\uffd2\006\uffd2\007\uffd2\011\uffd2\031\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\040\uffd2\041" +
    "\uffd2\044\uffd2\001\002\000\036\004\uffdd\005\uffdd\006\uffdd" +
    "\007\uffdd\011\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035" +
    "\uffdd\036\uffdd\040\uffdd\041\uffdd\044\uffdd\001\002\000\034" +
    "\004\070\005\055\006\067\007\061\011\057\031\065\032" +
    "\056\033\064\034\060\035\062\036\066\040\071\041\063" +
    "\001\002\000\004\011\054\001\002\000\036\004\uffda\005" +
    "\uffda\006\uffda\007\uffda\011\uffda\031\uffda\032\uffda\033\uffda" +
    "\034\uffda\035\uffda\036\uffda\040\uffda\041\uffda\044\uffda\001" +
    "\002\000\020\005\036\010\046\014\044\017\042\020\047" +
    "\037\037\045\031\001\002\000\020\005\036\010\046\014" +
    "\044\017\042\020\047\037\037\045\031\001\002\000\036" +
    "\004\uffdb\005\uffdb\006\uffdb\007\uffdb\011\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\040\uffdb\041\uffdb" +
    "\044\uffdb\001\002\000\020\005\036\010\046\014\044\017" +
    "\042\020\047\037\037\045\031\001\002\000\020\005\036" +
    "\010\046\014\044\017\042\020\047\037\037\045\031\001" +
    "\002\000\020\005\036\010\046\014\044\017\042\020\047" +
    "\037\037\045\031\001\002\000\020\005\036\010\046\014" +
    "\044\017\042\020\047\037\037\045\031\001\002\000\020" +
    "\005\036\010\046\014\044\017\042\020\047\037\037\045" +
    "\031\001\002\000\020\005\036\010\046\014\044\017\042" +
    "\020\047\037\037\045\031\001\002\000\020\005\036\010" +
    "\046\014\044\017\042\020\047\037\037\045\031\001\002" +
    "\000\020\005\036\010\046\014\044\017\042\020\047\037" +
    "\037\045\031\001\002\000\020\005\036\010\046\014\044" +
    "\017\042\020\047\037\037\045\031\001\002\000\020\005" +
    "\036\010\046\014\044\017\042\020\047\037\037\045\031" +
    "\001\002\000\036\004\uffdf\005\uffdf\006\uffdf\007\uffdf\011" +
    "\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf" +
    "\040\uffdf\041\uffdf\044\uffdf\001\002\000\036\004\uffe5\005" +
    "\uffe5\006\067\007\061\011\uffe5\031\uffe5\032\uffe5\033\uffe5" +
    "\034\uffe5\035\uffe5\036\uffe5\040\071\041\063\044\uffe5\001" +
    "\002\000\036\004\uffe2\005\uffe2\006\uffe2\007\uffe2\011\uffe2" +
    "\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\040" +
    "\071\041\063\044\uffe2\001\002\000\020\004\070\005\055" +
    "\006\067\007\061\011\uffd9\040\071\041\063\001\002\000" +
    "\020\004\070\005\055\006\067\007\061\011\uffd4\040\071" +
    "\041\063\001\002\000\020\004\070\005\055\006\067\007" +
    "\061\011\uffd6\040\071\041\063\001\002\000\036\004\uffe0" +
    "\005\uffe0\006\uffe0\007\uffe0\011\uffe0\031\uffe0\032\uffe0\033" +
    "\uffe0\034\uffe0\035\uffe0\036\uffe0\040\uffe0\041\uffe0\044\uffe0" +
    "\001\002\000\020\004\070\005\055\006\067\007\061\011" +
    "\uffd8\040\071\041\063\001\002\000\036\004\uffe3\005\uffe3" +
    "\006\uffe3\007\uffe3\011\uffe3\031\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\040\071\041\063\044\uffe3\001\002" +
    "\000\020\004\070\005\055\006\067\007\061\011\uffd7\040" +
    "\071\041\063\001\002\000\020\004\070\005\055\006\067" +
    "\007\061\011\uffd5\040\071\041\063\001\002\000\036\004" +
    "\uffe4\005\uffe4\006\067\007\061\011\uffe4\031\uffe4\032\uffe4" +
    "\033\uffe4\034\uffe4\035\uffe4\036\uffe4\040\071\041\063\044" +
    "\uffe4\001\002\000\004\012\107\001\002\000\014\021\013" +
    "\023\034\026\015\027\007\045\031\001\002\000\004\013" +
    "\111\001\002\000\020\013\uffea\021\uffea\022\112\023\uffea" +
    "\026\uffea\027\uffea\045\uffea\001\002\000\004\012\113\001" +
    "\002\000\014\021\013\023\034\026\015\027\007\045\031" +
    "\001\002\000\004\013\115\001\002\000\016\013\uffe9\021" +
    "\uffe9\023\uffe9\026\uffe9\027\uffe9\045\uffe9\001\002\000\036" +
    "\004\070\005\055\006\067\007\061\011\uffde\031\uffde\032" +
    "\uffde\033\uffde\034\uffde\035\uffde\036\uffde\040\071\041\063" +
    "\044\uffde\001\002\000\036\004\uffe1\005\uffe1\006\uffe1\007" +
    "\uffe1\011\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1" +
    "\036\uffe1\040\uffe1\041\uffe1\044\uffe1\001\002\000\020\005" +
    "\036\010\046\014\044\017\042\020\047\037\037\045\031" +
    "\001\002\000\020\004\070\005\055\006\067\007\061\040" +
    "\071\041\063\044\uffeb\001\002\000\016\013\ufff2\021\ufff2" +
    "\023\ufff2\026\ufff2\027\ufff2\045\ufff2\001\002\000\004\002" +
    "\uffff\001\002\000\004\013\125\001\002\000\004\002\001" +
    "\001\002\000\006\042\131\044\ufff6\001\002\000\004\044" +
    "\130\001\002\000\022\013\ufffb\021\ufffb\023\ufffb\024\ufffb" +
    "\025\ufffb\026\ufffb\027\ufffb\045\ufffb\001\002\000\004\045" +
    "\031\001\002\000\004\044\ufff5\001\002\000\004\013\ufff3" +
    "\001\002\000\016\013\ufffc\021\ufffc\023\ufffc\026\ufffc\027" +
    "\ufffc\045\ufffc\001\002\000\004\044\uffe7\001\002\000\020" +
    "\005\036\010\046\014\044\017\042\020\047\037\037\045" +
    "\031\001\002\000\020\004\070\005\055\006\067\007\061" +
    "\011\140\040\071\041\063\001\002\000\004\012\141\001" +
    "\002\000\014\021\013\023\034\026\015\027\007\045\031" +
    "\001\002\000\004\013\143\001\002\000\016\013\uffe8\021" +
    "\uffe8\023\uffe8\026\uffe8\027\uffe8\045\uffe8\001\002\000\004" +
    "\002\ufffe\001\002\000\020\004\070\005\055\006\067\007" +
    "\061\040\071\041\063\044\uffe6\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\006\027\007\016\010\025\011\026" +
    "\012\007\014\032\015\010\016\017\017\031\020\013\021" +
    "\015\022\022\023\021\024\020\025\011\001\001\000\016" +
    "\003\144\004\042\005\047\014\050\027\040\030\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\134\001" +
    "\001\000\002\001\001\000\014\006\133\007\016\010\025" +
    "\011\026\012\007\001\001\000\026\014\032\015\132\016" +
    "\017\017\031\020\013\021\015\022\022\023\021\024\020" +
    "\025\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\126\014\125\001\001\000\002\001\001\000\026\014" +
    "\032\015\123\016\017\017\031\020\013\021\015\022\022" +
    "\023\021\024\020\025\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\037\004\042\005\047\014\050\027\040\030\044\001" +
    "\001\000\016\003\116\004\042\005\047\014\050\027\040" +
    "\030\044\001\001\000\016\003\115\004\042\005\047\014" +
    "\050\027\040\030\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\003\051\004\042\005\047" +
    "\014\050\026\052\027\040\030\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\104\004" +
    "\042\005\047\014\050\027\040\030\044\001\001\000\016" +
    "\003\103\004\042\005\047\014\050\027\040\030\044\001" +
    "\001\000\002\001\001\000\016\003\102\004\042\005\047" +
    "\014\050\027\040\030\044\001\001\000\016\003\101\004" +
    "\042\005\047\014\050\027\040\030\044\001\001\000\016" +
    "\003\100\004\042\005\047\014\050\027\040\030\044\001" +
    "\001\000\016\003\077\004\042\005\047\014\050\027\040" +
    "\030\044\001\001\000\016\003\076\004\042\005\047\014" +
    "\050\027\040\030\044\001\001\000\016\003\075\004\042" +
    "\005\047\014\050\027\040\030\044\001\001\000\016\003" +
    "\074\004\042\005\047\014\050\027\040\030\044\001\001" +
    "\000\016\003\073\004\042\005\047\014\050\027\040\030" +
    "\044\001\001\000\016\003\072\004\042\005\047\014\050" +
    "\027\040\030\044\001\001\000\016\003\071\004\042\005" +
    "\047\014\050\027\040\030\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\014\032" +
    "\015\107\016\017\017\031\020\013\021\015\022\022\023" +
    "\021\024\020\025\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\014\032\015\113\016" +
    "\017\017\031\020\013\021\015\022\022\023\021\024\020" +
    "\025\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\120\004\042" +
    "\005\047\014\050\027\040\030\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\131\014\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\136\004\042\005\047\014\050\027\040" +
    "\030\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\014\032\015\141\016\017\017\031\020\013\021\015" +
    "\022\022\023\021\024\020\025\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Yylex getYylex() {
        return (Yylex)getScanner();
    }

    public void syntax_error(Symbol cur_token) {
        Yylex s = getYylex();
        String str = "****Error sintactico en [lin " + s.linea() + ", col " + s.columna() + "]";
	    System.err.println(str);
    }

    private void printProduccion(int num, String produccion) {
        Writer writer;
        String str = ";R" + num + ":\t" + produccion;
        try{
             writer = new BufferedWriter(new FileWriter("sinout.txt", true));
             writer.write(str + "\n");
             writer.close();
        } catch (IOException e) {
             System.out.println(e.getMessage());
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= TOK_MAIN TOK_LLAVEIZQUIERDA declaraciones sentencias TOK_LLAVEDERECHA 
            {
              Object RESULT =null;
		 printProduccion(1, "<programa> ::= main { <declaraciones> <funciones> <sentencias> }"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= TOK_MAIN TOK_LLAVEIZQUIERDA declaraciones TOK_LLAVEDERECHA 
            {
              Object RESULT =null;
		 printProduccion(1, "<programa> ::= main { <declaraciones> <funciones> <sentencias> }"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= TOK_MAIN TOK_LLAVEIZQUIERDA sentencias TOK_LLAVEDERECHA 
            {
              Object RESULT =null;
		 printProduccion(1, "<programa> ::= main { <declaraciones> <funciones> <sentencias> }"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= declaracion 
            {
              Object RESULT =null;
		 printProduccion(2, "<declaraciones> ::= <declaracion>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaraciones ::= declaracion declaraciones 
            {
              Object RESULT =null;
		 printProduccion(3, "<declaraciones> ::= <declaracion> <declaraciones>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion ::= clase identificadores TOK_PUNTOYCOMA 
            {
              Object RESULT =null;
		 printProduccion(4, "<declaracion> ::= <clase> <identificadores> ;"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // clase ::= clase_escalar 
            {
              Object RESULT =null;
		 printProduccion(5, "<clase> ::= <clase_escalar>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // clase_escalar ::= tipo 
            {
              Object RESULT =null;
		 printProduccion(9, "<clase_escalar> ::= <tipo>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase_escalar",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo ::= TOK_INT 
            {
              Object RESULT =null;
		 printProduccion(10, "<tipo> ::= int"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= TOK_BOOLEAN 
            {
              Object RESULT =null;
		 printProduccion(11, "<tipo> ::= boolean"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // identificadores ::= identificador 
            {
              Object RESULT =null;
		 printProduccion(18, "<identificadores> ::= <identificador>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identificadores",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // identificadores ::= identificador TOK_COMA identificadores 
            {
              Object RESULT =null;
		 printProduccion(19, "<identificadores> ::=<identificador>,<identificadores>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identificadores",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencias ::= sentencia 
            {
              Object RESULT =null;
		 printProduccion(30, "<sentencias> ::= <sentencia>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencias ::= sentencia sentencias 
            {
              Object RESULT =null;
		 printProduccion(31, "<sentencias> ::= <sentencia> <sentencias>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= sentencia_simple TOK_PUNTOYCOMA 
            {
              Object RESULT =null;
		 printProduccion(32, "<sentencia> ::= <sentencia_simple> ;"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= bloque 
            {
              Object RESULT =null;
		 printProduccion(33, "<sentencia> ::= <bloque>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia_simple ::= asignacion 
            {
              Object RESULT =null;
		 printProduccion(34, "<sentencia_simple> ::= <asignacion>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simple",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia_simple ::= lectura 
            {
              Object RESULT =null;
		 printProduccion(35, "<sentencia_simple> ::= <lectura>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simple",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia_simple ::= escritura 
            {
              Object RESULT =null;
		 printProduccion(36, "<sentencia_simple> ::= <escritura>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_simple",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bloque ::= condicional 
            {
              Object RESULT =null;
		 printProduccion(40, "<bloque> ::= <condicional>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bloque ::= bucle 
            {
              Object RESULT =null;
		 printProduccion(41, "<bloque> ::= <bucle>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // asignacion ::= identificador TOK_ASIGNACION exp 
            {
              Object RESULT =null;
		 printProduccion(43, "<asignacion> ::= <identificador> = <exp>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // condicional ::= TOK_IF TOK_PARENTESISIZQUIERDO exp TOK_PARENTESISDERECHO TOK_LLAVEIZQUIERDA sentencias TOK_LLAVEDERECHA 
            {
              Object RESULT =null;
		 printProduccion(50, "<condicional> ::= if ( <exp> ) { <sentencias> }"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // condicional ::= TOK_IF TOK_PARENTESISIZQUIERDO exp TOK_PARENTESISDERECHO TOK_LLAVEIZQUIERDA sentencias TOK_LLAVEDERECHA TOK_ELSE TOK_LLAVEIZQUIERDA sentencias TOK_LLAVEDERECHA 
            {
              Object RESULT =null;
		 printProduccion(51, "<condicional> ::= if ( <exp> ) { <sentencias> } else { <sentencias> }"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bucle ::= TOK_WHILE TOK_PARENTESISIZQUIERDO exp TOK_PARENTESISDERECHO TOK_LLAVEIZQUIERDA sentencias TOK_LLAVEDERECHA 
            {
              Object RESULT =null;
		 printProduccion(52, "<bucle> ::= while ( <exp> ) { <sentencias> }"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bucle",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lectura ::= TOK_SCANF identificador 
            {
              Object RESULT =null;
		 printProduccion(54, "<lectura> ::= scanf <identificador>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lectura",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // escritura ::= TOK_PRINTF exp 
            {
              Object RESULT =null;
		 printProduccion(56, "<escritura> ::= printf <exp>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escritura",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= exp TOK_MAS exp 
            {
              Object RESULT =null;
		 printProduccion(72, "<exp> ::= <exp> + <exp>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= exp TOK_MENOS exp 
            {
              Object RESULT =null;
		 printProduccion(73, "<exp> ::= <exp> - <exp>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= exp TOK_DIVISION exp 
            {
              Object RESULT =null;
		 printProduccion(74, "<exp> ::= <exp> / <exp>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= exp TOK_ASTERISCO exp 
            {
              Object RESULT =null;
		 printProduccion(75, "<exp> ::= <exp> * <exp>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= TOK_MENOS exp 
            {
              Object RESULT =null;
		 printProduccion(76, "<exp> ::= - <exp>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= exp TOK_AND exp 
            {
              Object RESULT =null;
		 printProduccion(77, "<exp> ::= <exp> && <exp>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= exp TOK_OR exp 
            {
              Object RESULT =null;
		 printProduccion(78, "<exp> ::= <exp> || <exp>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= TOK_NOT exp 
            {
              Object RESULT =null;
		 printProduccion(79, "<exp> ::= ! <exp>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= identificador 
            {
              Object RESULT =null;
		 printProduccion(80, "<exp> ::= <identificador>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= constante 
            {
              Object RESULT =null;
		 printProduccion(81, "<exp> ::= <constante>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= TOK_PARENTESISIZQUIERDO exp TOK_PARENTESISDERECHO 
            {
              Object RESULT =null;
		 printProduccion(82, "<exp> ::= ( <exp> )"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= TOK_PARENTESISIZQUIERDO comparacion TOK_PARENTESISDERECHO 
            {
              Object RESULT =null;
		 printProduccion(83, "<exp> ::= ( <comparacion> )"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comparacion ::= exp TOK_IGUAL exp 
            {
              Object RESULT =null;
		 printProduccion(93, "<comparacion> ::= <exp> == <exp>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comparacion ::= exp TOK_DISTINTO exp 
            {
              Object RESULT =null;
		 printProduccion(94, "<comparacion> ::= <exp> != <exp>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comparacion ::= exp TOK_MENORIGUAL exp 
            {
              Object RESULT =null;
		 printProduccion(95, "<comparacion> ::= <exp> <= <exp>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comparacion ::= exp TOK_MAYORIGUAL exp 
            {
              Object RESULT =null;
		 printProduccion(96, "<comparacion> ::= <exp> >= <exp>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comparacion ::= exp TOK_MENOR exp 
            {
              Object RESULT =null;
		 printProduccion(97, "<comparacion> ::= <exp> < <exp>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // comparacion ::= exp TOK_MAYOR exp 
            {
              Object RESULT =null;
		 printProduccion(98, "<comparacion> ::= <exp> > <exp>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // constante ::= constante_logica 
            {
              Object RESULT =null;
		 printProduccion(99, "<constante> ::= <constante_logica>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // constante ::= constante_entera 
            {
              Object RESULT =null;
		 printProduccion(100, "<constante> ::= <constante_entera>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // constante_logica ::= TOK_TRUE 
            {
              Object RESULT =null;
		 printProduccion(102, "<constante_logica> ::= true"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante_logica",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // constante_logica ::= TOK_FALSE 
            {
              Object RESULT =null;
		 printProduccion(103, "<constante_logica> ::= false"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante_logica",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // constante_entera ::= numero 
            {
              Object RESULT =null;
		 printProduccion(104, "<constante_entera> ::= <numero>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante_entera",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // numero ::= TOK_CONSTANTE_ENTERA 
            {
              Object RESULT =null;
		 printProduccion(105, "<numero> ::= TOK_CONSTANTE_ENTERA"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // identificador ::= TOK_IDENTIFICADOR 
            {
              Object RESULT =null;
		 printProduccion(108, "<identificador> ::= TOK_IDENTIFICADOR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identificador",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
